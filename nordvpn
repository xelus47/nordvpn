#!/usr/bin/env python2
import os,sys, subprocess

def parse_argv(iii = sys.argv[1:],args=None):
	if args is None:	
		args = {
		"options":{
			"config":os.environ['HOME']+"/.config/nordvpn/config",
			"forget":"", # feature not yet added
			"save":""
		},
		"server":"",
		"protocol":"", # tcp default
		"auth":""
		}



	argv = iii
	while len(argv)>0:
		s = argv.pop(0)
		if s.startswith("--"):
			if s[2:] in args['options']:
				if s[2:]=='save':
					try:
						arg = argv[0] # check the very next ahead
					except IndexError:
						arg=""
					if not ('auth' in arg or 'prot' in arg or 'server' in arg):
						args['options']['save']='auth,prot,server'
						continue
					else:
						args['options']['save']=argv.pop(0)
						continue
				else: # any option besides 'save'
					args['options'][s[2:]]=argv.pop(0)
		else:
			ovpn = "/etc/openvpn/%s.nordvpn.com.tcp443.ovpn"%s
			if os.path.exists(ovpn) and args['server']=='':
					args['server']=s
			elif s.lower() in ['tcp','udp'] and args['protocol']=='':
				args['protocol']=s
			elif os.path.exists(s.replace("~",os.environ['HOME'])):
				args['auth']=s
		
		# final checks
		if os.environ['HOME']+"/.config/nordvpn/config"==args['options']['config']:
			if not os.path.exists(os.environ['HOME']+"/.config/nordvpn"):
				os.mkdir(os.environ['HOME']+"/.config/nordvpn")
			if not os.path.exists(args['options']['config']):
				f = open(args['options']['config'],'w')
				f.write("")
				f.close()
		#if args['protocol']=='':
		#	args['protocol']='tcp' # tcp default
	return args

def generate_config(args=None):
	out = []
	if args is None:
		args=parse_argv([])
	#for x in args['options']:
	#	if args['options'][x]!="" and x!='save':
	#		out.append("--"+x+" "+args['options'][x])
	#if args['options']['save']=='':
	#	args['options']['save']='server,prot,auth'
	if 'server' in args['options']['save']:
		out.append(args['server'])
	if 'prot' in args['options']['save']:
		out.append(args['protocol'])
	if 'auth' in args['options']['save']:
		out.append(args['auth'])
	
	return " ".join(out)

def make_command(args=None):
	if args is None:
		args=parse_argv([])
	
	cmd = "sudo openvpn"
	assert args['protocol']!=''
	if args['protocol']=='tcp':
		n="443"
	elif args['protocol']=='udp':
		n="1194"
	else:
		print "Error: unsupported protocol: \"%s\""%args['protocol']
		sys.exit(1)
	path = "/etc/openvpn/%s.nordvpn.com.%s%s.ovpn"%(args['server'],args['protocol'],n)
	cmd+=" --config "+path
	
	if args['auth']!='':
		cmd+=" --auth-user-pass "+args['auth']

	return cmd



def save_config(args):	
	data = generate_config(args)
	f = open(args['options']['config'],'w')
	f.write(data)
	f.close()

if __name__=="__main__":
	args=parse_argv()
	print args
	
	# interprit config file afterwards, i.e. lower priority
	f = open(args['options']['config'],'r')
	data = f.read()
	f.close()
	print "-"*10
	newargs = parse_argv(data.replace("\n"," ").split(" "),args)
	#print newargs
	
	if newargs['server']=='':
		print "Please supply a server"
		sys.exit(1)

	if newargs['protocol']=='':
		newargs['protocol']='tcp'

	


	#print generate_config(newargs)
	#print "*"*10
	cmd=make_command(newargs)
	save_config(newargs)
	print cmd
	print generate_config(newargs)
	try:
		subprocess.call(cmd.split(" "))
	except KeyboardInterrupt:
		print "Exit..."
		sys.exit()
